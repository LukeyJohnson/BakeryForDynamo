<Workspace Version="1.1.0.2094" X="-72.161298230811" Y="162.41842163652" zoom="0.674831658426865" Name="Read From IFC" Description="adapted by me from original code at https://github.com/mvaerle/python-ifc" ID="150bb98b-37b4-4fbb-845f-779d98eb2ad4" Category="Bakery.BIM.IFC">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="b748e3e6-a817-4dac-b203-ccc74aa8a772" type="PythonNodeModels.PythonNode" nickname="Python Script" x="250" y="230.216482716747" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import re, copy
import time
#The inputs to this node will be stored as a list in the IN variables.
ifcFilePath = IN[0]
schemaFilePath = IN[1]
#getThis = IN[2]
printlist = []
parseLog = []
entByIdList = []
attribList = []
partList = []
lineIds = []
lineNames = []
#ifcreader code from https://github.com/mvaerle/python-ifc/blob/master/ifcschemareader.py

t3 = time.time()

class IfcSchema:
    SIMPLETYPES = ["INTEGER", "REAL", "STRING", "NUMBER", "LOGICAL", "BOOLEAN"]
    NO_ATTR = ["WHERE", "INVERSE","WR2","WR3", "WR4", "WR5", "UNIQUE", "DERIVE"]

    def __init__(self, filename):
        self.filename = filename
        self.file = open(self.filename)
        self.data = self.file.read()
        self.types = self.readTypes()
        self.entities = self.readEntities()
        printlist.append("Parsed from schema %s: %s entities and %s types" % (self.filename, len(self.entities), len(self.types)))

    def readTypes(self):
        """
        Parse all the possible types from the schema, 
        returns a dictionary Name -&gt; Type
        """
        types = {}
        for m in re.finditer("TYPE (.*) = (.*);", self.data):
            typename, typetype = m.groups() 
            if typetype in self.SIMPLETYPES:
                types[typename] = typetype
            else:
                types[typename] = "#" + typetype
                
        return types
        
    def readEntities(self):
        """
        Parse all the possible entities from the schema,
        returns a dictionary of the form:
        { name: { 
            "supertype": supertype, 
            "attributes": [{ key: value }, ..]
        }}  
        """
        entities = {}
        
        # Regexes must be greedy to prevent matching outer entity and end_entity strings
        # Regexes have re.DOTALL to match newlines
        for m in re.finditer("ENTITY (.*?)END_ENTITY;", self.data, re.DOTALL):
            entity = {}
            raw_entity_str = m.groups()[0]

            entity["name"] = re.search("(.*?)[;|\s]", raw_entity_str).groups()[0].upper()

            subtypeofmatch = re.search(".*SUBTYPE OF \((.*?)\);", raw_entity_str)
            entity["supertype"] = subtypeofmatch.groups()[0].upper() if subtypeofmatch else None

            # find the shortest string matched from the end of the entity type header to the
            # first occurence of a NO_ATTR string (when it occurs on a new line)
            inner_str = re.search(";(.*?)$", raw_entity_str, re.DOTALL).groups()[0]            

            attrs_str = min([inner_str.partition("\r\n "+a)[0] for a in self.NO_ATTR])
            attrs = []
            for am in re.finditer("(.*?) : (.*?);", attrs_str, re.DOTALL):
                name, attr_type = [s.replace("\r\n\t","") for s in am.groups()]
                attrs.append((name, attr_type))
            
            entity["attributes"] = attrs
            entities[entity["name"]] = entity
        

        return entities

    def getAttributes(self, name):
        """
        Get all attributes af an entity, including supertypes
        """
        ent = self.entities[name]

        attrs = []
        while ent != None:
            this_ent_attrs = copy.copy(ent["attributes"])
            this_ent_attrs.reverse()
            attrs.extend(this_ent_attrs)
            ent = self.entities.get(ent["supertype"], None)

        attrs.reverse()
        return attrs
        
	if __name__ == "__main__":
		schema = IfcSchema(schemaFilePath)


IFCLINE_RE = re.compile("#(\d+)[ ]?=[ ]?(.*?)\((.*)\);[\\r]?$")

class IfcFile:
    """
    Parses an ifc file given by filename, entities can be retrieved by name and id
    The whole file is stored in a dictionary (in memory)
    """
    
    entsById = {}
    entsByName = {}

    def __init__(self, filename, schema):
        self.filename = filename
        self.schema = schema
        self.file = open(self.filename)
        self.entById, self.entsByName = self.read()
        printlist.append("Parsed from file %s: %s entities" % (self.filename, len(self.entById)))
    
    def getEntityById(self, id):
        return self.entById.get(id, None)
    
    def getEntitiesByName(self, name):
        return self.entsByName.get(name, None)

    def read(self):
        """
        Returns 2 dictionaries, entById and entsByName
        """
        entById = {}
        entsByName = {}
        for line in self.file:
            e = self.parseLine(line)
            if e:
                entById[int(e["id"])] = e
                ids = e.get(e["name"],[])
                ids.append(e["id"])
                entByIdList.append(ids)
                entsByName[e["name"]] = list(set(ids))
        return [entById, entsByName]

    def parseLine(self, line):
        """
        Parse a line 
        """ 
        m = IFCLINE_RE.search(line)  # id,name,attrs
        if m:
            id, name, attrs = m.groups()
        else:
            return False
        
        lineIds.append(id)
        lineNames.append(name)
        
        return {"id": id, "name": name, "attributes": self.parseAttributes(name, attrs)}

    def parseAttributes(self, ent_name, attrs_str):
        """
        Parse the attributes of a line
        """
        parts = []
        lastpos = 0
        
        while lastpos &lt; len(attrs_str):
            newpos = self.nextString(attrs_str, lastpos)
            parts.extend(self.parseAttribute(attrs_str[lastpos:newpos-1]))
            lastpos = newpos
        
        schema_attributes = self.schema.getAttributes(ent_name)
        parseLog.append("Expected %s attributes, got %s (entity: %s" % \
			(len(schema_attributes), len(parts), ent_name))

#remove this error checking, but it probably needs to come back
#        assert len(schema_attributes) == len(parts), \
#			"Expected %s attributes, got %s (entity: %s" % \
#			(len(schema_attributes), len(parts), ent_name)

        attribute_names = [a[0] for a in schema_attributes]
        attribList.append(attribute_names)
        partList.append(parts)
        
        return dict(zip(attribute_names, parts))

    def parseAttribute(self, attr_str):
        """
        Map a single attribute to a python type (recursively)
        """
        parts = []
        lastpos = 0
        while lastpos &lt; len(attr_str):
            newpos = self.nextString(attr_str, lastpos)
            s = attr_str[lastpos:newpos-1]
            if (s[0] == "(" and s[-1] == ")"): # list, recurse
                parts.append(self.parseAttribute(s[1:-1]))
            else:
                try:
                    parts.append(float(s)) # number, any kind
                except ValueError:
                    if s[0] == "'" and s[-1] == "'": # string
                        parts.append(s[1:-1])
                    elif s == "$":
                        parts.append(None)
                    else:
                        parts.append(s) # ref, enum or other

            lastpos = newpos
        
        return parts


    def nextString(self, s, start):
        """
        Parse the data part of a line
        """
        parens = 0
        quotes = 0

        for pos in range(start,len(s)):
            c = s[pos]
            if c == "," and parens == 0 and quotes == 0:
                return pos+1
            elif c == "(" and quotes == 0:
                parens += 1
            elif c == ")" and quotes == 0:
                parens -= 1
            elif c == "\'" and quotes == 0:
                quotes = 1
            elif c =="\'" and quotes == 1:
                quotes = 0
            
        return len(s)+1                  



#if __name__ == "__main__":
    


t1 = time.time()
schema = IfcSchema(schemaFilePath)
t2 = time.time()
printlist.append("Loading schema took: %s s \n" % ((t2-t1)))

t1 = time.time()
ifcfile = IfcFile(ifcFilePath, schema) #this is the dictionary
t2 = time.time()
printlist.append("Loading file took: %s s \n" % ((t2-t1)))
    
#    print ifcfile.getEntityById(233), "\n"
#print IfcFile.getEntityById(216), "\n"

#Assign your output to the OUT variable.

#getvalue = ifcfile.getEntityById(getThis)
t4 = time.time()
printlist.append("Total run time took: %s s \n" % ((t4-t3)))
OUT = printlist, parseLog, entByIdList, attribList, partList, lineIds, lineNames</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="7d5051b8-4d23-47b0-880e-4b8dc291531e" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="734.337565635115" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="0;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="603789e9-a764-4086-886e-0d4260036fe7" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="757.100840414287" y="517.148564931408" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="3;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="9d45e79c-c0ba-4278-a41e-6ebe76ee33a3" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="805.596611020621" y="176.001256675044" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="1;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="b7fb8224-d143-4fbe-9a62-a13c54e1361b" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="813.323495460013" y="299.631407705319" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="2;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="fa70d438-a5ab-4cfa-853d-d0ccff3d4cde" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="816.317472987816" y="912.042630572712" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="4;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="2c681b2c-b01f-49d8-bcb3-2ae04c875321" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="592.895141690817" y="1168.6179529654" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="5;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="8a4911b8-ee3d-4090-93a2-aa87508cdbd3" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="914.353659701877" y="41.086819487276" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="655337f1-478c-4793-a979-10fd6db461ff" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="799.095258036968" y="1202.17585277452" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="0404a2c2-a77f-4616-9480-6b2b528c7652" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="985.612705087383" y="217.08807616232" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="b1e1c29b-adf2-4c47-93e0-6f2ac2f3dd02" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="993.339589526775" y="340.718227192595" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="73133ba6-2b78-4469-a630-1b034f34c6a6" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="971.219200656325" y="513.994606677785" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="080e8dcb-ce50-424e-8804-926523db305b" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="1022.51758933397" y="945.600530381837" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="e7ab6375-ee5a-4d45-a9da-7708e28683dd" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="493.109963170925" y="1426.39633080845" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="6;" ShouldFocus="false" />
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="3d6cb32c-dab1-47eb-9d2b-aadc0dd5d020" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="List.GetItemAtIndex" x="699.310079517076" y="1459.95423061757" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <CoreNodeModels.Watch guid="4eb57777-89fe-469f-a7fa-3a33fed4059a" type="CoreNodeModels.Watch" nickname="Watch" x="1331.32677862635" y="218.995438057186" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" />
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="23dbbda8-2d78-4f68-b43e-bbc334674c2b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ifcFilePath" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9460ec91-ed6b-4a26-be47-713c00615f4a" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="0" y="150" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ifcSchemaFileEXP" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="c525f426-5292-4926-a348-515605d407e6" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1561.05781770345" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="log" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="f44ba714-e6c1-4d81-ae87-4484a8b9cb98" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1531.68887923879" y="337.509376351298" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="line Ids" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="b6c64a03-6c14-4ef9-84a6-23c2ea5b4a8b" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1558.79866859079" y="145.248285782363" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="attribute read status" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="861ac7d6-a358-4aec-9e80-04c4a940c8a4" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1561.05781770345" y="450" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="attributesFromSchema" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="de369fb6-c5f7-4c42-8bf5-2b9b347e4f58" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1576.61643226732" y="570.827597692744" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="attribute values" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="d3f8ffd3-a037-4235-bc6f-e7c110c4f0a2" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1561.05781770345" y="750" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <Symbol value="IFC name" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="8a4911b8-ee3d-4090-93a2-aa87508cdbd3" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="0404a2c2-a77f-4616-9480-6b2b528c7652" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="b1e1c29b-adf2-4c47-93e0-6f2ac2f3dd02" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="73133ba6-2b78-4469-a630-1b034f34c6a6" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="080e8dcb-ce50-424e-8804-926523db305b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="655337f1-478c-4793-a979-10fd6db461ff" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b748e3e6-a817-4dac-b203-ccc74aa8a772" start_index="0" end="3d6cb32c-dab1-47eb-9d2b-aadc0dd5d020" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7d5051b8-4d23-47b0-880e-4b8dc291531e" start_index="0" end="8a4911b8-ee3d-4090-93a2-aa87508cdbd3" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="603789e9-a764-4086-886e-0d4260036fe7" start_index="0" end="73133ba6-2b78-4469-a630-1b034f34c6a6" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9d45e79c-c0ba-4278-a41e-6ebe76ee33a3" start_index="0" end="0404a2c2-a77f-4616-9480-6b2b528c7652" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b7fb8224-d143-4fbe-9a62-a13c54e1361b" start_index="0" end="b1e1c29b-adf2-4c47-93e0-6f2ac2f3dd02" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="fa70d438-a5ab-4cfa-853d-d0ccff3d4cde" start_index="0" end="080e8dcb-ce50-424e-8804-926523db305b" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="2c681b2c-b01f-49d8-bcb3-2ae04c875321" start_index="0" end="655337f1-478c-4793-a979-10fd6db461ff" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="8a4911b8-ee3d-4090-93a2-aa87508cdbd3" start_index="0" end="c525f426-5292-4926-a348-515605d407e6" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="655337f1-478c-4793-a979-10fd6db461ff" start_index="0" end="f44ba714-e6c1-4d81-ae87-4484a8b9cb98" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0404a2c2-a77f-4616-9480-6b2b528c7652" start_index="0" end="b6c64a03-6c14-4ef9-84a6-23c2ea5b4a8b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b1e1c29b-adf2-4c47-93e0-6f2ac2f3dd02" start_index="0" end="4eb57777-89fe-469f-a7fa-3a33fed4059a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="73133ba6-2b78-4469-a630-1b034f34c6a6" start_index="0" end="861ac7d6-a358-4aec-9e80-04c4a940c8a4" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="080e8dcb-ce50-424e-8804-926523db305b" start_index="0" end="de369fb6-c5f7-4c42-8bf5-2b9b347e4f58" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e7ab6375-ee5a-4d45-a9da-7708e28683dd" start_index="0" end="3d6cb32c-dab1-47eb-9d2b-aadc0dd5d020" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3d6cb32c-dab1-47eb-9d2b-aadc0dd5d020" start_index="0" end="d3f8ffd3-a037-4235-bc6f-e7c110c4f0a2" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="23dbbda8-2d78-4f68-b43e-bbc334674c2b" start_index="0" end="b748e3e6-a817-4dac-b203-ccc74aa8a772" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9460ec91-ed6b-4a26-be47-713c00615f4a" start_index="0" end="b748e3e6-a817-4dac-b203-ccc74aa8a772" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>