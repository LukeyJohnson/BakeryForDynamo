<Workspace Version="1.3.3.4651" X="-74.3092602923275" Y="55.4823246882132" zoom="0.784369328044827" ScaleFactor="1" Name="LevelBottom" Description="This node takes an input of the level and returns level bottom it.&#xD;&#xA;From archilab" ID="9ae84941-30ee-447d-a9f9-1d813b7a1d98" Category="GeniusLoci.Level">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="bc3ad169-4e62-438a-a22a-c7504bd8f33c" type="PythonNodeModels.PythonNode" nickname="Python Script" x="503.81477164523" y="345.373667356514" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script># Copyright(c) 2016, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net

import clr
# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
doc = DocumentManager.Instance.CurrentDBDocument

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

if isinstance(IN[0], list):
	levels = IN[0]
else:
	levels = [IN[0]]

def ProcessList(_func, _list):
    return map( lambda x: ProcessList(_func, x) if type(x)==list else _func(x), _list )

def GetLevelBottom(e):
	doc = DocumentManager.Instance.CurrentDBDocument
	allLevels = FilteredElementCollector(doc) \
				.OfCategory(BuiltInCategory.OST_Levels) \
				.WhereElementIsNotElementType() \
				.ToElements()

	elevations = [i.Elevation for i in allLevels]
	sortedLevels = [x for (y,x) in sorted(zip(elevations,allLevels))]
	sortedLevelNames = [i.Name for i in sortedLevels]
	index = sortedLevelNames.index(e.Name)
	if index - 1 &gt;= len(sortedLevels):
		return None
	else:
		return sortedLevels[index-1]

try:
	errorReport = None
	output = ProcessList(GetLevelBottom, levels)
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()

#Assign your output to the OUT variable
if errorReport == None:
	OUT = output
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="afd3363f-5ee1-40c2-8a01-cf9440b5332b" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="664.021986966269" y="321.2" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Level" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9874610f-a2a2-4718-99fd-88dfaf170bb1" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="371.2" y="361.283701385872" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Level" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="bc3ad169-4e62-438a-a22a-c7504bd8f33c" start_index="0" end="afd3363f-5ee1-40c2-8a01-cf9440b5332b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9874610f-a2a2-4718-99fd-88dfaf170bb1" start_index="0" end="bc3ad169-4e62-438a-a22a-c7504bd8f33c" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
</Workspace>