<Workspace Version="1.3.4.6666" X="161.752196105945" Y="-31.4848347275092" zoom="0.5451437552032" ScaleFactor="1" Name="Create Independent Tag" Description="Works only in Revit 2018 and later.&#xD;&#xA;This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. &#xD;&#xA;The node works also with Linked Elements, Multi Category tag and Material Tag.&#xD;&#xA;From archilab" ID="ee3e4c3a-599a-4dba-af1f-57f58b08ce3d" Category="GeniusLoci.Tag">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="70e4b9db-16ca-409a-a82e-5e420fcbec2b" type="PythonNodeModels.PythonNode" nickname="Python Script" x="645.46543876681" y="528.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="6">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <PortInfo index="4" default="False" />
      <PortInfo index="5" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net
# From Kulkul
# From T_Pover
# From Fcampojr
# Ability to tag Linked elements by Alban de Chasteigner

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

locationPts = UnwrapElement(IN[0])
tagType = UnwrapElement(IN[1])
elements = UnwrapElement(IN[2])

if IN[4] != None:
	link = UnwrapElement(IN[4])
else:
	link = None
	
RunIt = IN[5]

if isinstance(IN[3], list):
	views = []
	for i in IN[3]:
		views.append(UnwrapElement(i))
else:
	views = UnwrapElement(IN[3])

def toRvtPoint(point):
	return point.ToXyz()

def toRvtId(_id):
	if isinstance(_id, int) or isinstance(_id, str):
		id = ElementId(int(_id))
		return id
	elif isinstance(_id, ElementId):
		return _id

def GetUVPoint(pt):
	if type(pt) == Autodesk.DesignScript.Geometry.Point:
		return Autodesk.Revit.DB.UV(pt.X, pt.Y)
	elif type(pt) == Autodesk.DesignScript.Geometry.UV:
		return Autodesk.Revit.DB.UV(pt.U, pt.V)

def CreateSpaceTag(space, uv, view):
	doc = DocumentManager.Instance.CurrentDBDocument
	return doc.Create.NewSpaceTag(space, uv, view)

tagTypeId = toRvtId(tagType.Id)
chk = []
try:
	errorReport = None
	if RunIt:
		if tagType.Category.Name == "Room Tags":

			roomTags = []
			if isinstance(views, list):
				#pulled views for statement out
				for j in views:

					for i,k in zip(elements, locationPts):
						TransactionManager.Instance.EnsureInTransaction(doc)
						#added the if statement to get roomId from the linked element.
						if link != None:
							roomId = LinkElementId(link.Id, i.Id)
						else:
							roomId = LinkElementId(i.Id)
						location = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)
						roomTag = doc.Create.NewRoomTag(roomId, location, j.Id)
						roomTag.RoomTagType = tagType
						chk.append(roomId)
						roomTags.append(roomTag)
						TransactionManager.Instance.TransactionTaskDone()
			else:
				TransactionManager.Instance.EnsureInTransaction(doc)
				for i, j in zip(elements, locationPts):
					if link != None:
						roomId = LinkElementId(link.Id, i.Id)
					else:
						roomId = LinkElementId(i.Id)
					location = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)
					roomTag = doc.Create.NewRoomTag(roomId, location, views.Id)
					roomTag.RoomTagType = tagType
					roomTags.append(roomTag)
				TransactionManager.Instance.TransactionTaskDone()
			result = roomTags
		elif tagType.Category.Name == "Space Tags":
			TransactionManager.Instance.EnsureInTransaction(doc)
			roomTags = []
			if isinstance(views, list):
				for j in views:
					for i, k in zip(elements, locationPts):
						uv = GetUVPoint(k)
						spaceTag = CreateSpaceTag(i, uv, j)
						spaceTag.SpaceTagType = tagType
						roomTags.append(spaceTag)
			else:
				for i, j in zip(elements, locationPts):
					uv = GetUVPoint(j)
					spaceTag = CreateSpaceTag(i, uv, views)
					spaceTag.SpaceTagType = tagType
					roomTags.append(spaceTag)
			TransactionManager.Instance.TransactionTaskDone()
			result = roomTags
		elif tagType.Category.Name == "Multi-Category Tags":
			TransactionManager.Instance.EnsureInTransaction(doc)
			multitags = []
			if isinstance(views, list):
				for j in views:
					for i, k in zip(elements, locationPts):
						if link != None:
							reference = Reference(i).CreateLinkReference(link)
						else:
							reference = Reference(i)
						location = toRvtPoint(k)
						tag = IndependentTag.Create(doc,j.Id, reference, False, TagMode.TM_ADDBY_MULTICATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					multitags.append(tag)
			else:
				for i, j in zip(elements, locationPts):
					if link != None:
						reference = Reference(i).CreateLinkReference(link)
					else:
						reference = Reference(i)
					location = toRvtPoint(j)
					tag = IndependentTag.Create(doc, views.Id, reference, False, TagMode.TM_ADDBY_MULTICATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					multitags.append(tag)
			TransactionManager.Instance.TransactionTaskDone()
			result = multitags
		elif tagType.Category.Name == "Material Tags":
			TransactionManager.Instance.EnsureInTransaction(doc)
			Mattags = []
			if isinstance(views, list):
				for i,j,k in zip(elements, views, locationPts):
					if link != None:
						reference = Reference(i).CreateLinkReference(link)
					else:
						reference = Reference(i)
					location = toRvtPoint(k)
					tag = IndependentTag.Create(doc, j.Id, reference, False, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					Mattags.append(tag)
			else:
				for i, j in zip(elements, locationPts):
					if link != None:
						reference = Reference(i).CreateLinkReference(link)
					else:
						reference = Reference(i)
					location = toRvtPoint(j)
					tag = IndependentTag.Create(doc, views.Id, reference, False, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					Mattags.append(tag)
			TransactionManager.Instance.TransactionTaskDone()
			result = Mattags
		else:
			TransactionManager.Instance.EnsureInTransaction(doc)
			tags = []
			if isinstance(views, list):
				for i,j,k in zip(elements, views, locationPts):
					if link != None:
						reference = Reference(i).CreateLinkReference(link)
					else:
						reference = Reference(i)
					location = toRvtPoint(k)
					tag = IndependentTag.Create(doc, j.Id, reference, False, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					tags.append(tag)
			else:
				for i, j in zip(elements, locationPts):
					if link != None:
						reference = Reference(i).CreateLinkReference(link)
					else:
						reference = Reference(i)
					location = toRvtPoint(j)
					tag = IndependentTag.Create(doc, views.Id, reference, False, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					tags.append(tag)
			TransactionManager.Instance.TransactionTaskDone()
			result = tags
	else:
		result = "RunIt is set to False."
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()

#Assign your output to the OUT variable
if errorReport == None:
	OUT = result
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="5b3b7735-048c-455a-a61b-66739a43594f" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="870.26543876681" y="528.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Tags" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="4acb11bf-629f-47e1-8a84-9e5be63f6afe" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="246.26543876681" y="385.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="TagLocations" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="7e0dfe11-fc12-4ce5-83e6-a665b5725bde" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="246.26543876681" y="468.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="TagType" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5f4706a4-075e-4d75-9f8b-3eabc6b2e34b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="246.26543876681" y="551.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="b31b9440-8b19-4360-a5ea-1ca4fa6ace14" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="246.26543876681" y="635.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Views" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="3b7ff1e2-c1fd-4aa0-9eca-1be98d70bee3" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="246.26543876681" y="718.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="LinkInstance:var=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="aed348c3-980f-4057-a4a0-b828a2eb454e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="246.26543876681" y="801.87967224908" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="RunIt:bool=false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="70e4b9db-16ca-409a-a82e-5e420fcbec2b" start_index="0" end="5b3b7735-048c-455a-a61b-66739a43594f" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="4acb11bf-629f-47e1-8a84-9e5be63f6afe" start_index="0" end="70e4b9db-16ca-409a-a82e-5e420fcbec2b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7e0dfe11-fc12-4ce5-83e6-a665b5725bde" start_index="0" end="70e4b9db-16ca-409a-a82e-5e420fcbec2b" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="5f4706a4-075e-4d75-9f8b-3eabc6b2e34b" start_index="0" end="70e4b9db-16ca-409a-a82e-5e420fcbec2b" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b31b9440-8b19-4360-a5ea-1ca4fa6ace14" start_index="0" end="70e4b9db-16ca-409a-a82e-5e420fcbec2b" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="3b7ff1e2-c1fd-4aa0-9eca-1be98d70bee3" start_index="0" end="70e4b9db-16ca-409a-a82e-5e420fcbec2b" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="aed348c3-980f-4057-a4a0-b828a2eb454e" start_index="0" end="70e4b9db-16ca-409a-a82e-5e420fcbec2b" end_index="5" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>