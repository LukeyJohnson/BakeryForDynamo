<Workspace Version="1.2.0.2690" X="59.4694811914984" Y="181.173697627953" zoom="1.34613730474456" Name="Key Schedule" Description="This node will take a key schedule, data and a list of parameters and populate it with infomation from data parameter. Visit www.archi-lab.net for more information on how to prep this node for take off. " ID="9a1fadc6-3f7d-4684-80bb-c3de8b95727d" Category="Archi-lab_Grimshaw.Views.Schedule">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="65ebdf4a-50e4-431f-b0b7-998a7ac49d0b" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="605.814323307435" y="3.0414675207885" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="ViewSchedule" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ae25efae-f794-4398-a35b-54f85b786bb1" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="37.4049559773422" y="-1.2277995118734" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="ViewSchedule" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="6a7d7ee1-3c7e-4397-9408-f062e9b247a6" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="27.8343199272036" y="76.4211902484427" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Data" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0c007231-81ae-400f-9992-0e5d85c4cf79" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="25.528443155085" y="160.702115040982" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Parameter Names" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="b2819263-e79d-4f23-a7c9-a0f1fa98f75e" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="28.1979110094361" y="238.170739230384" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="UpperCase:bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <PythonNodeModels.PythonNode guid="681e6aa6-e918-4180-a697-4d5131287445" type="PythonNodeModels.PythonNode" nickname="Python Script" x="439.325689329941" y="3.59932544950831" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="4">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <Script>#Copyright(c) 2015, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
import sys
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

from System.Collections.Generic import *

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)
import re

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

keySchedule = UnwrapElement(IN[0])
data = IN[1]
inputParams = IN[2]
upper = IN[3]

# "Start" the transaction
TransactionManager.Instance.EnsureInTransaction(doc)

tableData = keySchedule.GetTableData()
sectionData = tableData.GetSectionData(SectionType.Body)

keyNames = []
for i in range(1,sectionData.NumberOfRows - 1,1):
	keyNames.append(str(int(i)))

allKeys = FilteredElementCollector(doc).WhereElementIsNotElementType()
params = [[] for i in range(len(keyNames))]
test = []
for key in allKeys:
	try:
		if key.get_Parameter(BuiltInParameter.REF_TABLE_ELEM_NAME).AsString() in keyNames and key.OwnerViewId == keySchedule.Id:
			indexValue = keyNames.index(key.get_Parameter(BuiltInParameter.REF_TABLE_ELEM_NAME).AsString())
			for i in range(0, len(inputParams),1):
				params[indexValue].extend(key.GetParameters(str(inputParams[i])))
	except:
		pass

for i, j in zip(params, data):
	for param, value in zip(i,j):
		if isinstance(value, str):
			valueDecoded = value.decode('string_escape')
		else:
			if value == None:
				valueDecoded = " "
			else:
				valueDecoded = str(value).decode('string_escape')
		if upper:
			valueDecoded = valueDecoded.upper()
			param.Set(valueDecoded)
		else:
			param.Set(valueDecoded)


# "End" the transaction
TransactionManager.Instance.TransactionTaskDone()

#Assign your output to the OUT variable
OUT = keySchedule</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="8d432bec-e808-443f-ab59-c6a44c6a7a26" type="PythonNodeModels.PythonNode" nickname="Python Script" x="278.609999992982" y="3.90539878048136" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Copyright(c) 2015, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

from System.Collections.Generic import *

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

keySchedule = UnwrapElement(IN[0])
data = IN[1]
inputParams = IN[2]

# "Start" the transaction
TransactionManager.Instance.EnsureInTransaction(doc)

test = []
count = []
cellParams = [[] for i in range(len(data))]
if any(isinstance(item, list) for item in data):
	# process list of lists
	for i in data:
		count.append(len(i))
	colCount = max(count)
	colAvailable = len(keySchedule.Definition.GetSchedulableFields())
	if colCount &gt; colAvailable:
		message = "Please add/remove parameters to/from schedule so that they match longest data set."
	else:
		tableData = keySchedule.GetTableData()
		sectionData = tableData.GetSectionData(SectionType.Body)
		if sectionData.NumberOfRows - 2 &lt;= len(data):
			# schedule by default will have 2 rows (A, B, C and Header Names)
			rowsToAdd = (len(data) - sectionData.NumberOfRows) + 2
			for i in range(0, rowsToAdd, 1):
				sectionData.InsertRow(0)
		else:
			# schedule when updating might already have too many rows 
			rowsToDelete = sectionData.NumberOfRows - 2 - len(data)
			for i in reversed(range(sectionData.NumberOfRows - rowsToDelete, sectionData.NumberOfRows, 1)):
				sectionData.RemoveRow(i)

# "End" the transaction
TransactionManager.Instance.TransactionTaskDone()

#Assign your output to the OUT variable
OUT = keySchedule</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="ae25efae-f794-4398-a35b-54f85b786bb1" start_index="0" end="8d432bec-e808-443f-ab59-c6a44c6a7a26" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6a7d7ee1-3c7e-4397-9408-f062e9b247a6" start_index="0" end="8d432bec-e808-443f-ab59-c6a44c6a7a26" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6a7d7ee1-3c7e-4397-9408-f062e9b247a6" start_index="0" end="681e6aa6-e918-4180-a697-4d5131287445" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0c007231-81ae-400f-9992-0e5d85c4cf79" start_index="0" end="8d432bec-e808-443f-ab59-c6a44c6a7a26" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0c007231-81ae-400f-9992-0e5d85c4cf79" start_index="0" end="681e6aa6-e918-4180-a697-4d5131287445" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b2819263-e79d-4f23-a7c9-a0f1fa98f75e" start_index="0" end="681e6aa6-e918-4180-a697-4d5131287445" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="681e6aa6-e918-4180-a697-4d5131287445" start_index="0" end="65ebdf4a-50e4-431f-b0b7-998a7ac49d0b" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="8d432bec-e808-443f-ab59-c6a44c6a7a26" start_index="0" end="681e6aa6-e918-4180-a697-4d5131287445" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
</Workspace>