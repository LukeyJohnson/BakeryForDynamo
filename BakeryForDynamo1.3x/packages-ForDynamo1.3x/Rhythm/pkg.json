{"license":"","file_hash":null,"name":"Rhythm","version":"2017.1.8","description":"Built against Dynamo 1.2.1 and Revit 2017. Rhythm is a set of useful nodes to help your Revit project maintain Rhythm with Dynamo. This project was generated initially at DPS Design, (dpsdesign.org) and is authored by John Pierson, author of sixtysecondrevit.blogspot.com. *Although these nodes are tested thoroughly we are not responsible for any adverse affects they may have on your file. Make sure you save before running anyone's nodes or graphs.","group":"Breaking CAD","keywords":["text","override","list","remove","documentation","workset","select","dimension","curtainwall","open","document","copy","unopened","background"],"dependencies":[],"contents":"All Elements of Type in Document - All elements of given type in specified document. This works for unopened files and for linked documents., All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Pipes at Reference Level - This will collect all pipes by their reference level., All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., BasicFileInfo.SavedInVersion - This will supply the version that the revit model is saved in., CableTray.Space - This node will determine the space a cable tray's center falls within., Collector.Areas - This is an area collector element that utilizes mostly OOTB nodes., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.TagTypes - This node collects the tag types in the model., Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., CurtainGrid.AllSegmentCurves - This will return the vertical and horizontal curtain grid segments regardless if hidden or not. Groups by U and V., CurtainGrid.ByElement - Gets the curtain grids by the host element. Seperates into U and V, CurtainGrid.ExistingSegmentCurves - Retrieve all the existing segment curves of the grid line.  Groups by U and V., CurtainGrid.FullCurve - Returns the curves of the input curtain grids. Groups by U and V., CurtainGrid.RemoveSegment - Removes segments from curtain grids. Can't take lists yet. Use with List.Combine., CurtainGrid.RemoveSegmentsFunction - Function to apply to remove segments node, CurtainGrid.SkippedSegmentCurves - Retrieve all the removed segment curves of the grid line. , Curve.FromLine - This will translate a line element to a curve., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Dimension.IsOverridden - This will report if a dimension has been overridden. , Dimension.LeaderEndPosition - This will return the leader end postion as a point., Dimension.MultiSegmentMembers - This will output all of the members of a multi-segment dimension., Dimension.NumberOfSegments - This will return the number of segments a dimension has. If it is a single dimension, this will return zero., Dimension.Origin - This will return the dimension origin as a point., Dimension.SetAboveValue - This will set the above value of a dimension., Dimension.SetBelowValue - This will set the below value of a dimension., Dimension.TextPosition - This will return the postition of the text as a point., Dimension.ValueString - The displayed value shown for the dimension segment. , Document.BackgroundOpen - This will open the input Revit files in the background., Document.Close - This will close the input Revit document. Offers a boolean toggle to save., Document.SetStartingView - This will set the starting view for a given document. ONLY WORKS IN ONE DOCUMENT AT A TIME, DraftingView.CreateInDocument - This will create a new drafting view in the given document. ONLY WORKS FOR ONE DOCUMENT AT A TIME, Element.AreaLocation - This node will determine what area (area plans) an element is located within. Made possible thanks to clockwork. :), Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.CopyFromDocument - This node allows you to copy elements from a specific document to your current document., Element.GetJoinedElements - This will obtain the elements joined to the input element., Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.IsPhaseCreatedValid - This will determine if the input phase is the correct one for the input elements, Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionFillColor - This node overrides the fill color of the element in view., Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Geometry.ToRevitType - This will convert designscript geometyr into Revit.DB types. Currently tested with curves, nurbs curves and solids., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Gmail.ComposeEmail - This node will compose a new email. Useful for notifications regarding a graph concluding. Uses pythons built-in SMTP Library., Gmail.ComposeEmailDetailed - This will compose a detailed email with subject and message., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Isolated Pick Model Elements(ordered) - Pick model elements in desired order of a desired category., Isolated Pick Model Elements - This allows a multiple selection of elements of specified category., Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., Pick Model Elements - This node offers a pick method for selecting elements in Revit., Railing.BalusterCount - This node will count the amout of balusters in a rail element. Only works for single element for now., ReferencePlane.ByStartPointEndPointActiveViewVector - This will create a reference plane by the given start point, end point and active view vector. If you want to use multiple points as input you need to use List@Level with level 1 for both inputs., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.3DSpaceTags - This will generate 3D space tags for all spaces in the project., Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.DatePicker - This provides a popup date selector for the user., Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.IntegerSlider - Provides an integer slider for the dynamo player. Has min, max and description., Rhythm.MassOSMData - This node will mass the OSM data based upon the know heights. If the building doesn't have a height, it will just output the polygon., Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee., Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.TextBoxInput - Provides a text box input for users. Allows for multiple strings if needed., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Rhythm.WhatTheNode - This node will let you search dynamonodes.com for the most likely package a node is from. Helps fix \"red\" nodes when users do not have package installed., Rhythm.YesNoToggle - This provides a toggle to use for graphs with dynamo player. The user chooses if they would like to run the graph., Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., RoomTag.Host - Retrieves the assoicated room with a room tag., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., Select Grids By Curve - This will select Revit grids by the input Revit curve,, SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., Space.IsPointInside - This will test if a point falls within a space., Space.SetSpaceType - This node will set the space type for the input space., Space.GetSpaceType - This will retrieve the space type of the space as a string., SpaceTag.Host - This obtains the MEP space associated with a given MEP space tag., SpaceType.All - This node will output ALL space types., SpaceType.ByName - This will output a MEP space type based on name search., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.ElementsModified - THis custom node reports the amount of elements in a list as a phrase., String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.IsUnicode - Determines if input string is a unicode character., String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., String.ToSentenceCase - This node will convert a single string of text to have capitalized sentences. If you need to use this over a list, use List.Map., String.ToTitle - Converts the given string to Title Case., StructuralBeamSystem.Members - Thist will collect the members of the ebeam system., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., UI.ColorPicker - This node allows the user to choose a color via the Revit API color selection dialog., UI.FilePath - Provides a file path option for use with Dynamo Player., UI.UserMessage - This will display a user message once. Until it is either toggled or changed., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, View.ConvertToIndependent - This will convert input dependent views to independent. Thanks to TheRevitKid for the idea!, ViewFamilyType.ByName - Select a view family type given it's name., Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names., Pick Model Element - This offers a single selection of a model element. Created for Dynamo Player usage., PipeInsulation.Create - This will add insulation to the input pipes. Can only handle one type of insulation and size for now.","engine_version":"1.2.1.3083","engine":"dynamo","engine_metadata":"","site_url":"sixtysecondrevit.blogspot.com","repository_url":"","contains_binaries":true,"node_libraries":[]}