<Workspace Version="1.2.0.2654" X="211.240177621971" Y="134.95395424244" zoom="1.66537098414077" Name="Override Fill Pattern in View" Description="Overrides fill pattern of any element in an active view to specified fill pattern and color" ID="53c86607-aff8-4fbb-8d37-1e824fff6168" Category="Archi-lab_Grimshaw.Modify">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9eeb00c2-bc10-400a-8529-50c51d0bd6ff" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="47.8064592265023" y="66.5929461247862" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Element" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="f04aef62-439e-4d0e-b0f8-4fa77cb3ce7c" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="45.2185015978791" y="126.661418530127" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Color" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="ee95f018-b2df-402a-bc4c-6003b7311a03" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="40.6895757477884" y="188.670859156935" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="fillPattern" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="ec5430ae-f7f1-4612-950e-0432c92685de" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="397.88783683469" y="85.4026017445685" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Element" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="b2efe6f3-4d68-43c4-849d-6e91c32cf5c0" type="PythonNodeModels.PythonNode" nickname="Python Script" x="239.871315737779" y="79.2302789496716" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

from System.Collections.Generic import *

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

def ProcessList(_func, _list):
    return map( lambda x: ProcessList(_func, x) if type(x)==list else _func(x), _list )

def Unwrap(e):
	return UnwrapElement(e)

def ConvertColor(e):
	return Autodesk.Revit.DB.Color(e.Red, e.Green, e.Blue)

def OverrideColorPattern(e, c, f):
	gSettings = OverrideGraphicSettings()
	gSettings.SetProjectionFillColor(c)
	gSettings.SetProjectionFillPatternId(f.Id)
	gSettings.SetCutFillColor(c)
	gSettings.SetCutFillPatternId(f.Id)
	doc.ActiveView.SetElementOverrides(e.Id, gSettings)
	return e
	
elements = ProcessList(Unwrap, IN[0])

colors = ConvertColor(IN[1])

fillPat = UnwrapElement(IN[2])

try:
	errorReport = None
	TransactionManager.Instance.EnsureInTransaction(doc)
	
	test = []
	for i in elements:
		test.append(OverrideColorPattern(i, colors, fillPat))
		
	TransactionManager.Instance.TransactionTaskDone()
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()


#Assign your output to the OUT variable
if errorReport == None:
	OUT = test
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="9eeb00c2-bc10-400a-8529-50c51d0bd6ff" start_index="0" end="b2efe6f3-4d68-43c4-849d-6e91c32cf5c0" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f04aef62-439e-4d0e-b0f8-4fa77cb3ce7c" start_index="0" end="b2efe6f3-4d68-43c4-849d-6e91c32cf5c0" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ee95f018-b2df-402a-bc4c-6003b7311a03" start_index="0" end="b2efe6f3-4d68-43c4-849d-6e91c32cf5c0" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b2efe6f3-4d68-43c4-849d-6e91c32cf5c0" start_index="0" end="ec5430ae-f7f1-4612-950e-0432c92685de" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-15.7707901000977" eyeY="130.859893798828" eyeZ="62.6621131896973" lookX="18.8822326660156" lookY="-20.4557514190674" lookZ="-91.2641220092773" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>