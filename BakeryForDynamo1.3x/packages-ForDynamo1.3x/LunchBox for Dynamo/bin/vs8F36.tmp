<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LunchBox</name>
    </assembly>
    <members>
        <member name="M:LunchBoxClasses.clsXMLHelper.GetXMLNodes(System.Collections.Generic.List{System.Object},System.Xml.XmlNode)">
            <summary>
            Get XML Nodes
            </summary>
            <param name="parentbranch"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:LunchBoxClasses.clsXMLHelper.GetXMLValues(System.Collections.Generic.List{System.Object},System.Xml.XmlNode)">
            <summary>
            Get XML Values
            </summary>
            <param name="parentbranch"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:Generate.Attractors">
            <summary>
            Attractor algorithms
            </summary>
        </member>
        <member name="T:Generate.Tesselation">
            <summary>
            Tesselation algorithms
            </summary>
        </member>
        <member name="T:Geometry.Curves">
            <summary>
            Curve Manipulation
            </summary>
        </member>
        <member name="M:Geometry.Curves.EndPoints(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Gets start and end points and parameter values
            </summary>
            <param name="curve">Curve</param>
            <returns name="StartPoint">Start point.</returns>
            <returns name="EndPoint">Start point.</returns>
            <returns name="StartParameter">Start parameter.</returns>
            <returns name="EndParameter">End parameter.</returns>
            <search>lunchbox,curve,points,start,end,parameter</search>
        </member>
        <member name="M:Geometry.Curves.DivideCurveByDistance(Autodesk.DesignScript.Geometry.Curve,System.Double)">
            <summary>
            Divides a curve using a distance between segments
            </summary>
            <param name="curve">Curve to divide</param>
            <param name="Distance">Distance between curve segments</param>
            <returns name="Points">A list of points</returns>
            <returns name="Planes">A list of planes</returns>
            <returns name="Tangents">A list of tangent vectors</returns>
            <returns name="Distances">A list of distances</returns>
            <returns name="Parameters">A list of parameter values</returns>
            <search>lunchbox,curve,point,plane,divide,tangent</search>
        </member>
        <member name="M:Geometry.Curves.DivideCurve(Autodesk.DesignScript.Geometry.Curve,System.Double)">
            <summary>
            Divides a curve evenly along the parameter space
            </summary>
            <param name="curve">Curve to divide</param>
            <param name="Number">Number of divisions</param>
            <returns name="Points">A list of points</returns>
            <returns name="Planes">A list of planes</returns>
            <returns name="Tangents">A list of tangent vectors</returns>
            <returns name="Parameters">A list of parameter values</returns>
            <search>lunchbox,curve,point,plane,divide,tangent</search>
        </member>
        <member name="M:Geometry.Curves.DeconstructPolyCurve(Autodesk.DesignScript.Geometry.PolyCurve)">
            <summary>
            Get segment and vertices of a polycurve
            </summary>
            <param name="polycurve">PolyCurve</param>
            <returns name="Segments">PolyCurve segments.</returns>
            <returns name="Points">Points at PolyCurve discontinuities.</returns>
            <search>lunchbox,polycurve</search>
        </member>
        <member name="M:Geometry.Curves.ShortestWalk(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line})">
            <summary>
            Find the 'Shortest Walk' within a curve network.  This node uses ported open source code by Giulio Piacentino of McNeel and Associates.
            </summary>
            <param name="CurveNetwork">A list of curve segments defining a network.</param>
            <param name="Lengths">A list of lengths for each curve segment. Length does not need to be "actual" if you want to weight the curves.</param>
            <param name="Paths">A list lines defining the start and end of the path.</param>
            <returns name="Shortest Walk">The shortest walk path.</returns>
            <returns name="Links">Resulting links.</returns>
            <returns name="Directions">Resulting directions.</returns>
            <returns name="Length">Resulting lengths.</returns>
            <search>lunchbox, curves, shortest walk, sort, path, distance</search>
        </member>
        <member name="T:Geometry.Points">
            <summary>
            Create and manipulate points
            </summary>
        </member>
        <member name="M:Geometry.Points.DeconstructPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Returns the X,Y, and Z coordinates of a point
            </summary>
            <param name="point">Point object</param>
            <returns path="X">X Coordinate</returns>
            <returns path="Y">Y Coordinate</returns>
            <returns path="Z">Z Coordinate</returns>
            <search>lunchbox,point,x,y,z</search>
        </member>
        <member name="M:Geometry.Points.NumbersToPoint(System.Collections.Generic.List{System.Double})">
            <summary>
            Create points from a list of 2 or 3 numbers
            </summary>
            <param name="Numbers">Number values (ordered in X,Y,Z)</param>
            <returns path="Point">Point.</returns>
            <returns>Points</returns>
        </member>
        <member name="M:Geometry.Points.PointToNumbers(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create numbers from points
            </summary>
            <param name="point">Point</param>
            <returns name="Numbers">Numbers (coordinate list)</returns>
            <search>lunchbox,point</search>
        </member>
        <member name="M:Geometry.Points.StringToPoint(System.String)">
            <summary>
            Converts a comma separated point string to a point object
            </summary>
            <param name="Text">Point string</param>
            <returns path="Point">Point.</returns>
            <search>lunchbox,point,string</search>
        </member>
        <member name="M:Geometry.Points.PointToString(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Converts a Point to comma separted point string
            </summary>
            <param name="point">Point</param>
            <returns name="Text">Point string.</returns>
            <search>lunchbox,point,string</search>
        </member>
        <member name="M:Geometry.Points.SortPointsAlongCurve(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Sort points along a curve
            </summary>
            <param name="Points">Points</param>
            <param name="Guide">Guide curve</param>
            <returns path="SortedPoints">Points sorted along a curve.</returns>
            <remarks path="Indices">Index map of sorted points.</remarks>
            <search>lunchbox,point,sort</search>
        </member>
        <member name="T:Geometry.Surfaces">
            <summary>
            Surface Manipulation
            </summary>
        </member>
        <member name="M:Geometry.Surfaces.DivideSurfaceUV(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Divides a surface using UV divisions
            </summary>
            <param name="surface">Surface</param>
            <param name="UDivision">U division</param>
            <param name="VDivision">V division</param>
            <returns name="Points">A list of points</returns>
            <returns name="Planes">A list of planes</returns>
            <returns name="Normals">A list of normal vectors.</returns>
            <returns name="Gaussian">A list of Gaussian curvature values</returns>
            <returns name="UParams">A list of U parameter values</returns>
            <returns name="VParams">A list of V parameter values</returns>
            <search>lunchbox,surface,point,plane,divide,normal,curvature</search>
        </member>
        <member name="M:Geometry.Surfaces.DeconstructSurface(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Deconstructs a surface into edge curves and points
            </summary>
            <param name="surface">Surface</param>
            <returns name="Edges">Edge curves.</returns>
            <returns name="Points">Corner points.</returns>
        </member>
        <member name="M:Geometry.Surfaces.DeconstructPolySurface(Autodesk.DesignScript.Geometry.PolySurface)">
            <summary>
            Deconstructs a polysurface into faces, edge curves, and points
            </summary>
            <param name="polysurface">PolySurface</param>
            <returns name="Faces">Face surfaces.</returns>
            <returns name="Points">Corner points.</returns>
        </member>
        <member name="T:Geometry.Solid">
            <summary>
            Solid forms
            </summary>
        </member>
        <member name="T:Geometry.Intersection">
            <summary>
            Intersection logic
            </summary>
        </member>
        <member name="M:Geometry.Intersection.FindIntersections(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Geometry},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Geometry})">
            <summary>
            Find intersections from a list of geometry and a list of cutting geometry.
            </summary>
            <param name="geo">List of geometry</param>
            <param name="others">List of cutting geometry</param>
            <returns name="intersections">List of intersection geometry</returns>
        </member>
        <member name="M:Geometry.Intersection.CreateIsovist(Autodesk.DesignScript.Geometry.Point,System.Double,System.Double,System.Double,System.Int32,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Geometry})">
            <summary>
            Find intersections from a list of geometry and a list of cutting geometry.
            </summary>
            <param name="origin">Origin point for the isovist</param>
            <param name="radius">Max radius of the rays</param>
            <param name="startAngle">Start angle for the ray cast</param>
            <param name="endAngle">End angle for the ray cast</param>
            <param name="rayCount">Number of rays to be cast</param>
            <param name="boundaries">A list of solid boundaries</param>
            <returns name="Rays">A list of rays</returns>
            <returns name="MinLength">Smallest ray length</returns>
            <returns name="MaxLength">Largest ray length</returns>
            <returns name="AvgLength">Average ray length</returns>
        </member>
        <member name="M:Geometry.Intersection.GeometrySplit(Autodesk.DesignScript.Geometry.Surface,Autodesk.DesignScript.Geometry.Geometry[])">
            <summary>
            Advanced Geometry Splitting
            </summary>
            <param name="geometry">Geometry to Cut</param>
            <param name="cutting">List of Cutting Objects</param>
            <returns name="SplitGeometry">Split geometry.</returns>
        </member>
        <member name="T:Geometry.Panel">
            <summary>
            Paneling Systems
            </summary>
        </member>
        <member name="M:Geometry.Panel.PanelQuad(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create quad panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Panels">Panel surfaces</returns>
            <returns name = "Points">Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelQuadStaggered(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create staggered quad panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Panels">Panel surfaces</returns>
            <returns name = "Points">Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelQuadScewed(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32,System.Double)">
            <summary>
            Create scewed quad panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <param name="t">Parameter for adjusted scewing amount (0-1)</param>
            <returns name = "QuadPanels">Quad Panel surfaces</returns>
            <returns name = "QuadPoints">Quad Panel points</returns>
            <returns name = "TriPanels">Tri Panel surfaces</returns>
            <returns name = "TriPoints">Tri Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelDiamond(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create diamond panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "QuadPanels">Quad Panel surfaces</returns>
            <returns name = "QuadPoints">Quad Panel points</returns>
            <returns name = "TriPanels">Tri Panel surfaces</returns>
            <returns name = "TriPoints">Tri Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelHexagon(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32,System.Double)">
            <summary>
            Create hexagonal panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <param name="t">Parameter for adjusted hexagons (0-1)</param>
            <returns name = "HexPanels">Hexagon Panel surfaces</returns>
            <returns name = "HexPoints">Hexagon Panel points</returns>
            <returns name = "PentPanels">Pentagon Panel surfaces</returns>
            <returns name = "PentPoints">Pentagon Panel points</returns>
            <returns name = "QuadPanels">Quad Panel surfaces</returns>
            <returns name = "QuadPoints">Quad Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelTriangleA(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create Triangle A panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Panels">Panel surfaces</returns>
            <returns name = "Points">Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelTriangleB(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create Triangle B panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Panels">Panel surfaces</returns>
            <returns name = "Points">Panel points</returns>
        </member>
        <member name="M:Geometry.Panel.PanelTriangleC(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create Triangle C panels
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Panels">Panel surfaces</returns>
            <returns name = "Points">Panel points</returns>
        </member>
        <member name="T:Geometry.Structure">
            <summary>
            Structure Systems
            </summary>
        </member>
        <member name="M:Geometry.Structure.WireGrid(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create wireframe grid
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Lines">Wireframe lines</returns>
            <returns name = "Points">Wireframe points</returns>
        </member>
        <member name="M:Geometry.Structure.WireGridBraced1D(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create wireframe grid braced in a 1 direction
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Lines">Wireframe lines</returns>
            <returns name = "Points">Wireframe points</returns>
        </member>
        <member name="M:Geometry.Structure.WireGridBraced2D(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32)">
            <summary>
            Create wireframe grid braced in a 2 directions
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <returns name = "Lines">Wireframe lines</returns>
            <returns name = "Points">Wireframe points</returns>
        </member>
        <member name="M:Geometry.Structure.WireDiagrid(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create wireframe diagrid
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <param name="t">Diagrid type switch.</param>
            <returns name = "Lines">Wireframe lines</returns>
            <returns name = "Points">Wireframe points</returns>
        </member>
        <member name="M:Geometry.Structure.WireHexagon(Autodesk.DesignScript.Geometry.Surface,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Create wireframe hexagon
            </summary>
            <param name="srf">Surface</param>
            <param name="u">U Divisions</param>
            <param name="v">V Divisions</param>
            <param name="a">Hexagon shape adjustment</param>
            <param name="t">Hexagon type switch</param>
            <returns name = "Lines">Wireframe lines</returns>
            <returns name = "Points">Wireframe points</returns>
        </member>
        <member name="T:Geometry.Vectors">
            <summary>
            Vectors
            </summary>
        </member>
        <member name="T:Interoperability.Excel">
            <summary>
            LunchBox Excel utilities.
            </summary>
        </member>
        <member name="M:Interoperability.Excel.GetExcelFileInfo(System.Object)">
            <summary>
            Get Excel File Info
            </summary>
            <param name="File">Excel File</param>
            <returns name="WorkbookName">Nameo of the Excel workbook.</returns>
            <returns name="WorksheetNames">Names of the Excel worksheets.</returns>
            <search>lunchbox,lists,rows,excel,dataset,datatable</search>
        </member>
        <member name="M:Interoperability.Excel.GetExcelWorksheetData(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            Get All Excel Worksheet Data
            </summary>
            <param name="File">Excel File</param>
            <param name="IsVisible">Boolean to determine if Workbook is visible.</param>
            <param name="UseHeaders">Boolean to determine if the first row used for headers.</param>
            <param name="WorksheetName">Name of the worksheet.</param>
            <returns name="DataTable">Worksheet as DataTable.</returns>
            <search>lunchbox,lists,rows,excel,dataset,datatable</search>
        </member>
        <member name="M:Interoperability.Excel.GetExcelWorksheetDataByRange(System.Object,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Excel Worksheet Data by Range
            </summary>
            <param name="File">Excel File</param>
            <param name="IsVisible">Is Excel visible.</param>
            <param name="UseHeaders">Read first row as headers.</param>
            <param name="WorksheetName">Name of the worksheet.</param>
            <param name="RowStart">The starting row index.</param>
            <param name="RowEnd">The ending row index.</param>
            <param name="ColStart">The starting column index.</param>
            <param name="ColEnd">The ending column index.</param>
            <returns name="DataTable">Worksheet as DataTable.</returns>
            <search>lunchbox,lists,rows,excel,dataset,datatable</search>
        </member>
        <member name="T:Lists.Manage">
            <summary>
            Manage Lists
            </summary>
        </member>
        <member name="M:Lists.Manage.RemoveNulls(System.Collections.Generic.List{System.Object})">
            <summary>
            Removes null items from a list
            </summary>
            <param name="Data">Data with nulls</param>
            <returns path="Cleaned">Cleaned data.</returns>
            <returns path="Indices">Index map of cleaned data.</returns>
            <search>lunchbox,lists,duplicate,clean,null,remove</search>
        </member>
        <member name="M:Lists.Manage.ReplaceNulls(System.Object,System.Object)">
            <summary>
            Replace Null values with something else
            </summary>
            <param name="Data">Data to check</param>
            <param name="ReplaceWith">Replace nulls with this value</param>
            <returns name="Replaced">New items with replaced nulls</returns>
            <search>lunchbox,lists,null,replace</search>
        </member>
        <member name="M:Lists.Manage.RandomizeOrder(System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            Scramble the order of a list of data
            </summary>
            <param name="Data">Data</param>
            <param name="Seed">Random seed</param>
            <returns name="Randomized">Scrambled order.</returns>
            <returns name="Indices">Index map of scrambled data.</returns>
            <search>lunchbox,lists,random,order</search>
        </member>
        <member name="T:Lists.Dictionary">
            <summary>
            Create and manage dictionary objects
            </summary>
        </member>
        <member name="M:Lists.Dictionary.CreateDictionary(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            Create a new dictionary using key value pairs
            </summary>
            <param name="Keys">Unique keys for the dictionary</param>
            <param name="Values">Values (objects)</param>
            <returns name="Dictionary">Dictionary</returns>
            <serach>lunchbox,dictionary,search</serach>
        </member>
        <member name="M:Lists.Dictionary.GetDictionaryKeysValues(System.Object)">
            <summary>
            Gets the Keys and Values in a Dictionary
            </summary>
            <param name="dictionary">Dictionary object</param>
            <returns name="Keys">Dictionary keys.</returns>
            <returns name="Values">Dictionary values.</returns>
            <search>lunchbox,dictionary,search</search>
        </member>
        <member name="M:Lists.Dictionary.GetValueFromDictionary(System.Object,System.String)">
            <summary>
            Gets a value from a dictionary
            </summary>
            <param name="dictionary">Dictionary to search</param>
            <param name="Key">Key</param>
            <returns name="Values">Value from dictionary.</returns>
            <search>lunchbox,dictionary,search</search>
        </member>
        <member name="T:Lists.DataSets">
            <summary>
            Create and Manage Sets of Data
            </summary>
        </member>
        <member name="M:Lists.DataSets.CreateDataTable(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.Object}})">
            <summary>
            Creates a new DataTable
            </summary>
            <param name="Name">Name of the DataTable</param>
            <param name="Headers">List of column headers</param>
            <param name="Data">Data organized by rows</param>
            <returns name="DataTable">DataTable</returns>
        </member>
        <member name="M:Lists.DataSets.CreateDataSet(System.String,System.Collections.Generic.List{System.Data.DataTable})">
            <summary>
            Create a new DataSet
            </summary>
            <param name="Name">Name of the DataSet</param>
            <param name="Tables">DataTables in the DataSet</param>
            <returns name="DataSet">DataSet</returns>
            <search>lunchbox,lists,dataset</search>
        </member>
        <member name="M:Lists.DataSets.GetTablesfromDataSet(System.Data.DataSet)">
            <summary>
            Get a list of tables from a DataSet
            </summary>
            <param name="Data">DataSet</param>
            <returns name="DataTables">List of DataTables Objects.</returns>
            <returns name="Names">List of DataTable names.</returns>
            <search>lunchbox,lists,datatable,dataset</search>
        </member>
        <member name="M:Lists.DataSets.GetDataFromTable(System.Data.DataTable)">
            <summary>
            Get all rows from a DataTable
            </summary>
            <param name="Data">DataTable</param>
            <returns name="Rows">Data organized by Row</returns>
            <returns name="Headers">Table headers.</returns>
            <search>lunchbox,lists,rows,dataset,datatable</search>
        </member>
        <member name="M:Lists.DataSets.SelectDataFromTable(System.Data.DataTable,System.String)">
            <summary>
            Search a DataTable using DataSet 'Select' Syntax.
            </summary>
            <param name="Data"></param>
            <param name="SelectString">Criteria to search for.</param>
            <returns name="DataTable">DataTable with the rows that meet the criteria</returns>
        </member>
        <member name="M:Lists.DataSets.SerializeXML(System.Data.DataSet,System.Boolean,System.String)">
            <summary>
            Convert a DataSet to XML
            </summary>
            <param name="Data">DataSet object</param>
            <param name="SaveBool">Set to 'true' to save the file.</param>
            <param name="FilePath">File path of the saved file.</param>
            <returns name="XML">XML</returns>
            <search>lunchbox,lists,rows,dataset,datatable, XML</search>
        </member>
        <member name="M:Lists.DataSets.SerializeJSON(System.Data.DataSet,System.Boolean,System.String)">
            <summary>
            Convert a DataSet to JSON
            </summary>
            <param name="Data">DataSet object</param>
            <param name="SaveBool">Set to 'true' to save the file.</param>
            <param name="FilePath">File path of the saved file.</param>
            <returns name="JSON">JSON</returns>
            <search>lunchbox,lists,rows,dataset,datatable,JSON,XML</search>
        </member>
        <member name="M:Lists.DataSets.DeserializeXML(System.String)">
            <summary>
            Convert XML to Dynamo
            </summary>
            <param name="XML">XML string</param>
            <returns name="Values">Node values.</returns>
            <returns name="Nodes">Node names.</returns>
            <search>lunchbox,lists,rows,dataset,datatable, XML</search>
        </member>
        <member name="M:Lists.DataSets.GetXMLNode(System.String,System.String)">
            <summary>
            Get XML node properties
            </summary>
            <param name="XML"></param>
            <param name="TagName"></param>
            <returns name="InnerXML">XML contained within the tag</returns>
        </member>
        <member name="M:Lists.DataSets.XMLtoJSON(System.String)">
            <summary>
            Convert XML to JSON
            </summary>
            <param name="XML">XML String</param>
            <returns name="JSON">JSON String</returns>
            <search>lunchbox,lists,rows,dataset,datatable,JSON,XML</search>
        </member>
        <member name="M:Lists.DataSets.JSONtoXML(System.String)">
            <summary>
            Convert JSON to XML
            </summary>
            <param name="JSON">JSON String</param>
            <returns name="XML">XML String</returns>
            <search>lunchbox,lists,rows,dataset,datatable,JSON,XML</search>
        </member>
        <member name="T:Lists.Sequence">
            <summary>
            Create sequences
            </summary>
        </member>
        <member name="M:Lists.Sequence.RandomNumbers(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Random list of numbers using Min/Max range, number of items, and seed value
            </summary>
            <param name="Min">Minimum Value in Range of Random Numbers</param>
            <param name="Max">Maximum Value in Range of Random Numbers</param>
            <param name="Number">Number of Random Numbers</param>
            <param name="Seed">Random Seed Value</param>
            <returns name="Numbers">List of numbers</returns>
            <search>lunchbox,lists,random,numbers,sequence,division</search>
        </member>
        <member name="M:Lists.Sequence.RangeDivision(System.Double,System.Double,System.Int32)">
            <summary>
            A range of numbers based on divisions
            </summary>
            <param name="Start">The starting value of the range</param>
            <param name="End">The ending value of the range</param>
            <param name="Division">Number of divisions for the range</param>
            <returns name="Numbers">List of numbers</returns>
            <search>lunchbox,lists,range,numbers,sequence,division</search>
        </member>
        <member name="T:Lists.Strings">
            <summary>
            Manipulate Strings
            </summary>
        </member>
        <member name="M:Lists.Strings.SortDuplicateStrings(System.Collections.Generic.List{System.String})">
            <summary>
            Sorts a list of strings based on duplicate values
            </summary>
            <param name="Strings">List of strings to sort through</param>
            <returns name="UniqueStrings">Sorted duplicates</returns>
            <returns name="Indices">Index map of the unique strings.</returns>
            <search>lunchbox,lists,search,duplicate,sort,string</search>
        </member>
        <member name="M:Lists.Strings.SearchListForString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Search through a list of strings
            </summary>
            <param name="Strings">List of strings to search through</param>
            <param name="SearchFor">Item to search for</param>
            <returns name="Strings">List of found items</returns>
            <returns name="Indices">Index map of the found strings.</returns>
            <search>lunchbox,lists,search,string</search>
        </member>
        <member name="T:Revit.Elements">
            <summary>
            Revit Element Collection
            </summary>
        </member>
        <member name="T:Revit.Geometry">
            <summary>
            Revit Geometry Tools
            </summary>
        </member>
        <member name="T:Revit.Parameters">
            <summary>
            Revit Parameters
            </summary>
        </member>
    </members>
</doc>
