<Workspace Version="0.7.5.3566" X="327.736970414929" Y="116.611782526344" zoom="1.0897201102803" Description="Create a Diamond XYZ grid on a face.  The face surface must have an untrimmed UV parameter space." Category="LunchBox.Archive.Geometry.Panel" Name="LunchBox Diamond Grid by Face" ID="f4b9a5ab-998b-4dc0-963d-ef3c4c3171e5">
  <Elements>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="8d85fb30-bc86-43bd-9288-2a1ced4469d7" nickname="Input" x="-114.960456475988" y="168.447216260277" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="Surface" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="5b620cf9-cc7c-4455-9c07-c693d820aef8" nickname="Input" x="-114.037180103336" y="261.108569643196" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="U" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Symbol type="Dynamo.Nodes.Symbol" guid="d3b4a7b7-7a58-44b8-9aec-60e61cd9bcf6" nickname="Input" x="-115.037180103336" y="328.858569643196" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="V" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="de1e1cf3-a58c-411c-b292-50763e6bf743" nickname="Output" x="853.799954928386" y="-38.3497597411166" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="A-Panel Pts" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="9d8dd293-afb5-413f-a961-d7de3ce18cbd" nickname="Output" x="851.174470929044" y="56.553694554489" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="A-Panel Polys" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.DSFunction type="Dynamo.Nodes.DSFunction" guid="10a3da88-7875-4752-9aac-bc9323e154d2" nickname="List.GetItemAtIndex" x="614.096379120078" y="553.802362598601" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Nodes.DSFunction type="Dynamo.Nodes.DSFunction" guid="13e14d52-c491-427b-94c9-84e7d0468795" nickname="List.GetItemAtIndex" x="614.096379120078" y="424.854175070434" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Nodes.DoubleInput type="Dynamo.Nodes.DoubleInput" guid="7fce54cc-5610-410e-95ec-61c5255f472d" nickname="Number" x="493.437108505072" y="475.537174929009" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="1" />
    </Dynamo.Nodes.DoubleInput>
    <Dynamo.Nodes.DoubleInput type="Dynamo.Nodes.DoubleInput" guid="95fe24ec-ddf2-4bb4-9642-81f3d44bfbb2" nickname="Number" x="493.437108505072" y="604.485362457176" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="2" />
    </Dynamo.Nodes.DoubleInput>
    <Dynamo.Nodes.DSFunction type="Dynamo.Nodes.DSFunction" guid="a2ac0681-eed4-4464-8e36-6e4a96f5472f" nickname="List.GetItemAtIndex" x="614.096379120078" y="301.093361462285" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Nodes.DoubleInput type="Dynamo.Nodes.DoubleInput" guid="bf01bba5-4ea5-4bc4-aa49-80150afa9994" nickname="Number" x="493.437108505072" y="351.77636132086" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="0" />
    </Dynamo.Nodes.DoubleInput>
    <DSIronPythonNode.PythonNode type="DSIronPythonNode.PythonNode" guid="1f5855de-cde8-4de3-a356-d6c95fdef150" nickname="Python Script" x="283.644143949628" y="394.930198774451" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script># Nathan Miller, 2013
# The Proving Ground, http://theprovingground.org

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *


# Panel division class
class PanelDivision:
	
	# divide surface
	def DiamondEdgeDivision(self, srf, udiv, vdiv):
		ustep = 1.0/udiv
		vstep = 1.0/vdiv
		
		quads = []
		polys = []
		panels = []
		for i in range(0,int(udiv+1)):
			for j in range(0,int(vdiv+1)):
				if (i+j)%2 == 0:
					ptA = srf.PointAtParameter(0,0)
					ptB = srf.PointAtParameter(0,0)
					ptC = srf.PointAtParameter(0,0)
					ptD = srf.PointAtParameter(0,0)
				
					if i&gt;0:
						ptA = srf.PointAtParameter((i-1)*ustep,j*vstep)
					else:
						ptB = srf.PointAtParameter(i*ustep,j*vstep)
					
					if j&gt;0:
						ptB = srf.PointAtParameter(i*ustep,(j-1)*vstep)
					else:
						ptB = srf.PointAtParameter(i*ustep,j*vstep)
						
					if i&lt;udiv:
						ptC = srf.PointAtParameter((i+1)*ustep,j*vstep)
					else:
						ptC = srf.PointAtParameter(i*ustep,j*vstep)
					
					if j&lt;=(vdiv -1):
						ptD = srf.PointAtParameter(i*ustep,(j+1)*vstep)
					else:
						ptD = srf.PointAtParameter(i*ustep,j*vstep)
						
					if i&gt;0 and j&gt;0 and i&lt;udiv and j&lt;vdiv:
						quad = []
					else:
						if i==0 and j==0:
							quad = []
							#Append to quad
							quad.append(ptB)
							quad.append(ptC)
							quad.append(ptD)
							#Append quads
							quads.append(quad)
							
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
							
						if i==0 and j==vdiv:
							quad = []
							#Append to quad
							quad.append(ptB)
							quad.append(ptC)
							quad.append(ptD)
							#Append quads
							quads.append(quad)
							
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
							
						if i==udiv and j==0:
							quad = []
							#Append to quad
							quad.append(ptC)
							quad.append(ptD)
							quad.append(ptA)
							#Append quads
							quads.append(quad)
							
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
						
						if i==udiv and j==vdiv:
							quad = []
							#Append to quad
							quad.append(ptA)
							quad.append(ptB)
							quad.append(ptC)
							#Append quads
							quads.append(quad)
											
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
						
						if i == 0 and j &gt; 0 and j &lt; vdiv:
							quad = []
							#Append to quad
							quad.append(ptB)
							quad.append(ptC)
							quad.append(ptD)
							#Append quads
							quads.append(quad)
												
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
							
						if i == udiv and j &gt; 0 and j &lt; vdiv:
							quad = []
							#Append to quad
							quad.append(ptA)
							quad.append(ptB)
							quad.append(ptD)
							#Append quads
							quads.append(quad)
												
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
							
						if j == 0 and i &gt; 0 and i &lt; udiv:
							quad = []
							#Append to quad
							quad.append(ptA)
							quad.append(ptC)
							quad.append(ptD)
							#Append quads
							quads.append(quad)
												
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
							
						if j == vdiv and i &gt; 0 and i &lt; udiv:
							quad = []
							#Append to quad
							quad.append(ptA)
							quad.append(ptB)
							quad.append(ptC)
							#Append quads
							quads.append(quad)
												
							#polygons
							poly = Polygon.ByPoints(quad)
							polys.append(poly)
				
							#panels
							panel = Surface.ByPerimeterPoints(quad)
							panels.append(panel)
		self.panels = panels
		self.quads = quads
		self.polys = polys

#Main code
srf = IN[0]
udiv = IN[1]
vdiv = IN[2]

quads = []
polys = []
panels = []

for k in range(0, len(srf)):
	s = srf[k]
	u = udiv[k]
	v = vdiv[k]
			
	divide = PanelDivision()
	divide.DiamondEdgeDivision(s,u,v)
					
	quads.append(divide.quads)
	panels.append(divide.panels)
	polys.append(divide.polys)
	
output = []
output.append(quads)
output.append(polys)
output.append(panels)

#Assign your output to the OUT variable
OUT = output</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction type="Dynamo.Nodes.DSFunction" guid="8e1f00f7-19d9-4d6c-abf3-de452e559677" nickname="List.GetItemAtIndex" x="614.096379120078" y="172.130742640595" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Nodes.DoubleInput type="Dynamo.Nodes.DoubleInput" guid="037104c9-2ad0-46c5-a1f7-b0934d7ae437" nickname="Number" x="493.437108505072" y="222.81374249917" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="2" />
    </Dynamo.Nodes.DoubleInput>
    <DSIronPythonNode.PythonNode type="DSIronPythonNode.PythonNode" guid="f1269f76-e812-4f33-9109-0b0fdd3e2e09" nickname="Python Script" x="284.799859222421" y="43.820004221231" isVisible="true" isUpstreamVisible="true" lacing="Disabled" inputcount="3">
      <Script>#Copyright(c) 2014, Nathan Miller
# The Proving Ground, http://theprovingground.org

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Panel division class
class PanelDivision:
	
	# divide surface
	def DiamondDivision(self, srf, udiv, vdiv):
		ustep = 1.0/udiv
		vstep = 1.0/vdiv
		
		quads = []
		polys = []
		panels = []
		for i in range(0,int(udiv+1)):
			for j in range(0,int(vdiv+1)):
				if (i+j)%2 == 0:
					ptA = srf.PointAtParameter(0,0)
					ptB = srf.PointAtParameter(0,0)
					ptC = srf.PointAtParameter(0,0)
					ptD = srf.PointAtParameter(0,0)
			
					if i&gt;0:
						ptA = srf.PointAtParameter((i-1)*ustep,j*vstep)
					else:
						ptB = srf.PointAtParameter(i*ustep,j*vstep)
				
					if j&gt;0:
						ptB = srf.PointAtParameter(i*ustep,(j-1)*vstep)
					else:
						ptB = srf.PointAtParameter(i*ustep,j*vstep)
					
					if i&lt;udiv:
						ptC = srf.PointAtParameter((i+1)*ustep,j*vstep)
					else:
						ptC = srf.PointAtParameter(i*ustep,j*vstep)
				
					if j&lt;=(vdiv -1):
						ptD = srf.PointAtParameter(i*ustep,(j+1)*vstep)
					else:
						ptD = srf.PointAtParameter(i*ustep,j*vstep)
					
					if i&gt;0 and j&gt;0 and i&lt;udiv and j&lt;=(vdiv-1):
						quad = []
						#Append to quad
						quad.append(ptA)
						quad.append(ptB)
						quad.append(ptC)
						quad.append(ptD)
						#Append quads
						quads.append(quad)
					
						#polygons
						poly = Polygon.ByPoints(quad)
						polys.append(poly)
			
						#panels
						panel = Surface.ByPerimeterPoints(quad)
						panels.append(panel)
		self.quads = quads
		self.polys = polys
		self.panels = panels

#Main code
srf = IN[0]
udiv = IN[1]
vdiv = IN[2]

quads = []
polys = []
panels = []

for k in range(0, len(srf)):
	s = srf[k]
	u = udiv[k]
	v = vdiv[k]
			
	divide = PanelDivision()
	divide.DiamondDivision(s,u,v)
					
	quads.append(divide.quads)
	panels.append(divide.panels)
	polys.append(divide.polys)
		
output = []
output.append(quads)
output.append(polys)
output.append(panels)

#Assign your output to the OUT variable
OUT = output</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.DSFunction type="Dynamo.Nodes.DSFunction" guid="56c63901-9a8a-4f36-b26d-ebc35fb26a37" nickname="List.GetItemAtIndex" x="614.096379120078" y="43.1825551124278" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Nodes.DoubleInput type="Dynamo.Nodes.DoubleInput" guid="be7b9240-010a-468f-89aa-26cc57411c8b" nickname="Number" x="493.437108505072" y="93.865554971003" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="1" />
    </Dynamo.Nodes.DoubleInput>
    <Dynamo.Nodes.DSFunction type="Dynamo.Nodes.DSFunction" guid="bbb0e803-52c9-4516-a017-6ec3d680d546" nickname="List.GetItemAtIndex" x="614.096379120078" y="-80.5782584957209" isVisible="true" isUpstreamVisible="true" lacing="Shortest" assembly="DSCoreNodes.dll" function="DSCore.List.GetItemAtIndex@var[]..[],int" />
    <Dynamo.Nodes.DoubleInput type="Dynamo.Nodes.DoubleInput" guid="58e117ca-0d7b-4f43-af57-2aa50e01dd94" nickname="Number" x="493.437108505072" y="-29.8952586371457" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <System.Double value="0" />
    </Dynamo.Nodes.DoubleInput>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="7dfdc752-6575-4872-8bf4-6c33cb71f697" nickname="Output" x="850.518214302885" y="151.109787645253" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="A-Panel Faces" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="63d231cc-1e42-47c2-ab41-e41139381b27" nickname="Output" x="842.648565077856" y="428.70412606719" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="B-Panels Polys" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="413bc673-a72e-4cb8-a987-2145b02b8b78" nickname="Output" x="840.773984196238" y="319.800068496559" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="B-Panels Pts" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Output type="Dynamo.Nodes.Output" guid="7e9cabb8-4058-4471-8225-57db7b1f8bc5" nickname="Output" x="858.675615887229" y="571.373901585788" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <Symbol value="B-Panels Faces" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Function type="Dynamo.Nodes.Function" guid="6d885c35-d1c9-4989-b65a-829d4cc3672d" nickname="LunchBox List Matcher" x="50.2799003525294" y="160.514800814892" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <ID value="80d036ba-246a-40cc-b565-92ef2c41e425" />
      <Name value="LunchBox List Matcher" />
      <Description value="Compares a List A against a List B and matches length of List A.  If ListA &gt; ListB, ListB will be extended.  If ListA &lt; ListB, ListB will be truncated." />
      <Inputs>
        <Input value="ListA" />
        <Input value="ListB" />
      </Inputs>
      <Outputs>
        <Output value="ListA" />
        <Output value="MatchListB" />
      </Outputs>
    </Dynamo.Nodes.Function>
    <Dynamo.Nodes.Function type="Dynamo.Nodes.Function" guid="08235355-446c-481d-af54-e2ef37be74fa" nickname="LunchBox List Matcher" x="44.7995839192627" y="267.881820012055" isVisible="true" isUpstreamVisible="true" lacing="Disabled">
      <ID value="80d036ba-246a-40cc-b565-92ef2c41e425" />
      <Name value="LunchBox List Matcher" />
      <Description value="Compares a List A against a List B and matches length of List A.  If ListA &gt; ListB, ListB will be extended.  If ListA &lt; ListB, ListB will be truncated." />
      <Inputs>
        <Input value="ListA" />
        <Input value="ListB" />
      </Inputs>
      <Outputs>
        <Output value="ListA" />
        <Output value="MatchListB" />
      </Outputs>
    </Dynamo.Nodes.Function>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="8d85fb30-bc86-43bd-9288-2a1ced4469d7" start_index="0" end="6d885c35-d1c9-4989-b65a-829d4cc3672d" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="8d85fb30-bc86-43bd-9288-2a1ced4469d7" start_index="0" end="08235355-446c-481d-af54-e2ef37be74fa" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="5b620cf9-cc7c-4455-9c07-c693d820aef8" start_index="0" end="6d885c35-d1c9-4989-b65a-829d4cc3672d" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="d3b4a7b7-7a58-44b8-9aec-60e61cd9bcf6" start_index="0" end="08235355-446c-481d-af54-e2ef37be74fa" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="10a3da88-7875-4752-9aac-bc9323e154d2" start_index="0" end="7e9cabb8-4058-4471-8225-57db7b1f8bc5" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="13e14d52-c491-427b-94c9-84e7d0468795" start_index="0" end="63d231cc-1e42-47c2-ab41-e41139381b27" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="7fce54cc-5610-410e-95ec-61c5255f472d" start_index="0" end="13e14d52-c491-427b-94c9-84e7d0468795" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="95fe24ec-ddf2-4bb4-9642-81f3d44bfbb2" start_index="0" end="10a3da88-7875-4752-9aac-bc9323e154d2" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="a2ac0681-eed4-4464-8e36-6e4a96f5472f" start_index="0" end="413bc673-a72e-4cb8-a987-2145b02b8b78" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="bf01bba5-4ea5-4bc4-aa49-80150afa9994" start_index="0" end="a2ac0681-eed4-4464-8e36-6e4a96f5472f" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="1f5855de-cde8-4de3-a356-d6c95fdef150" start_index="0" end="10a3da88-7875-4752-9aac-bc9323e154d2" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="1f5855de-cde8-4de3-a356-d6c95fdef150" start_index="0" end="13e14d52-c491-427b-94c9-84e7d0468795" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="1f5855de-cde8-4de3-a356-d6c95fdef150" start_index="0" end="a2ac0681-eed4-4464-8e36-6e4a96f5472f" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="8e1f00f7-19d9-4d6c-abf3-de452e559677" start_index="0" end="7dfdc752-6575-4872-8bf4-6c33cb71f697" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="037104c9-2ad0-46c5-a1f7-b0934d7ae437" start_index="0" end="8e1f00f7-19d9-4d6c-abf3-de452e559677" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1269f76-e812-4f33-9109-0b0fdd3e2e09" start_index="0" end="8e1f00f7-19d9-4d6c-abf3-de452e559677" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1269f76-e812-4f33-9109-0b0fdd3e2e09" start_index="0" end="bbb0e803-52c9-4516-a017-6ec3d680d546" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f1269f76-e812-4f33-9109-0b0fdd3e2e09" start_index="0" end="56c63901-9a8a-4f36-b26d-ebc35fb26a37" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="56c63901-9a8a-4f36-b26d-ebc35fb26a37" start_index="0" end="9d8dd293-afb5-413f-a961-d7de3ce18cbd" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="be7b9240-010a-468f-89aa-26cc57411c8b" start_index="0" end="56c63901-9a8a-4f36-b26d-ebc35fb26a37" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="bbb0e803-52c9-4516-a017-6ec3d680d546" start_index="0" end="de1e1cf3-a58c-411c-b292-50763e6bf743" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="58e117ca-0d7b-4f43-af57-2aa50e01dd94" start_index="0" end="bbb0e803-52c9-4516-a017-6ec3d680d546" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="6d885c35-d1c9-4989-b65a-829d4cc3672d" start_index="0" end="f1269f76-e812-4f33-9109-0b0fdd3e2e09" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6d885c35-d1c9-4989-b65a-829d4cc3672d" start_index="0" end="1f5855de-cde8-4de3-a356-d6c95fdef150" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="6d885c35-d1c9-4989-b65a-829d4cc3672d" start_index="1" end="f1269f76-e812-4f33-9109-0b0fdd3e2e09" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="6d885c35-d1c9-4989-b65a-829d4cc3672d" start_index="1" end="1f5855de-cde8-4de3-a356-d6c95fdef150" end_index="1" portType="0" />
    <Dynamo.Models.ConnectorModel start="08235355-446c-481d-af54-e2ef37be74fa" start_index="1" end="f1269f76-e812-4f33-9109-0b0fdd3e2e09" end_index="2" portType="0" />
    <Dynamo.Models.ConnectorModel start="08235355-446c-481d-af54-e2ef37be74fa" start_index="1" end="1f5855de-cde8-4de3-a356-d6c95fdef150" end_index="2" portType="0" />
  </Connectors>
  <Notes />
</Workspace>