<Workspace Version="1.3.4.6666" X="-535.357114985676" Y="-171.139690719567" zoom="0.793979681425322" ScaleFactor="1" Name="Create Annotation Tag (Multi-Category)" Description="Note : This method is deprecated in Revit 2019.&#xD;&#xA;This node will create an annotation tag at a given location, of given type and in a supplied view. If only single view is supplied then all tags will be created in that view. &#xD;&#xA;Multi Category tag and Material Tag have been added to the original node.&#xD;&#xA;From archilab" ID="e1b3efe2-06f3-4cba-9d46-8f129b867bba" Category="GeniusLoci.Tag">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="9d791e1c-8443-4a60-8eb0-c8d8cd9d1ffa" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1402.14518869659" y="503.710837917419" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Tags" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="faa588b0-967c-46a1-8276-6d5e95a7df28" type="PythonNodeModels.PythonNode" nickname="Python Script" x="1177.34518869659" y="494.425123631704" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="6">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <PortInfo index="4" default="False" />
      <PortInfo index="5" default="False" />
      <Script>#Copyright(c) 2015, Konrad K Sobon
# @arch_laboratory, http://archi-lab.net
# From Kulkul
# From T_Pover
# From Fcampojr

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

locationPts = UnwrapElement(IN[0])
tagType = UnwrapElement(IN[1])
elements = UnwrapElement(IN[2])

if IN[4] != None:
	link = UnwrapElement(IN[4])
else:
	link = None
	
RunIt = IN[5]

if isinstance(IN[3], list):
	views = []
	for i in IN[3]:
		views.append(UnwrapElement(i))
else:
	views = UnwrapElement(IN[3])

def toRvtPoint(point):
	return point.ToXyz()

def toRvtId(_id):
	if isinstance(_id, int) or isinstance(_id, str):
		id = ElementId(int(_id))
		return id
	elif isinstance(_id, ElementId):
		return _id

def GetUVPoint(pt):
	if type(pt) == Autodesk.DesignScript.Geometry.Point:
		return Autodesk.Revit.DB.UV(pt.X, pt.Y)
	elif type(pt) == Autodesk.DesignScript.Geometry.UV:
		return Autodesk.Revit.DB.UV(pt.U, pt.V)

def CreateSpaceTag(space, uv, view):
	doc = DocumentManager.Instance.CurrentDBDocument
	return doc.Create.NewSpaceTag(space, uv, view)

tagTypeId = toRvtId(tagType.Id)
chk = []
try:
	errorReport = None
	if RunIt:
		if tagType.Category.Name == "Room Tags":

			roomTags = []
			if isinstance(views, list):
				#pulled views for statement out
				for j in views:

					for i,k in zip(elements, locationPts):
						TransactionManager.Instance.EnsureInTransaction(doc)
						#added the if statement to get roomId from the linked element.
						if link != None:
							roomId = LinkElementId(link.Id, i.Id)
						else:
							roomId = LinkElementId(i.Id)
						location = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)
						roomTag = doc.Create.NewRoomTag(roomId, location, j.Id)
						roomTag.RoomTagType = tagType
						chk.append(roomId)
						roomTags.append(roomTag)
						TransactionManager.Instance.TransactionTaskDone()
			else:
				TransactionManager.Instance.EnsureInTransaction(doc)
				for i, j in zip(elements, locationPts):
					if link != None:
						roomId = LinkElementId(link.Id, i.Id)
					else:
						roomId = LinkElementId(i.Id)
					location = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)
					roomTag = doc.Create.NewRoomTag(roomId, location, views.Id)
					roomTag.RoomTagType = tagType
					roomTags.append(roomTag)
				TransactionManager.Instance.TransactionTaskDone()
			result = roomTags
		elif tagType.Category.Name == "Space Tags":
			TransactionManager.Instance.EnsureInTransaction(doc)
			roomTags = []
			if isinstance(views, list):
				for j in views:
					for i, k in zip(elements, locationPts):
						uv = GetUVPoint(k)
						spaceTag = CreateSpaceTag(i, uv, j)
						spaceTag.SpaceTagType = tagType
						roomTags.append(spaceTag)
			else:
				for i, j in zip(elements, locationPts):
					uv = GetUVPoint(j)
					spaceTag = CreateSpaceTag(i, uv, views)
					spaceTag.SpaceTagType = tagType
					roomTags.append(spaceTag)
			TransactionManager.Instance.TransactionTaskDone()
			result = roomTags
		elif tagType.Category.Name == "Multi-Category Tags":
			TransactionManager.Instance.EnsureInTransaction(doc)
			multitags = []
			if isinstance(views, list):
				for j in views:
					for i, k in zip(elements, locationPts):
						location = toRvtPoint(k)
						tag = doc.Create.NewTag(j, i, False, TagMode.TM_ADDBY_MULTICATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					multitags.append(tag)
			else:
				for i, j in zip(elements, locationPts):
					location = toRvtPoint(j)
					tag = doc.Create.NewTag(views, i, False, TagMode.TM_ADDBY_MULTICATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					multitags.append(tag)
			TransactionManager.Instance.TransactionTaskDone()
			result = multitags
		elif tagType.Category.Name == "Material Tags":
			TransactionManager.Instance.EnsureInTransaction(doc)
			Mattags = []
			if isinstance(views, list):
				for i,j,k in zip(elements, views, locationPts):
					location = toRvtPoint(k)
					tag = doc.Create.NewTag(j, i, False, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					Mattags.append(tag)
			else:
				for i, j in zip(elements, locationPts):
					location = toRvtPoint(j)
					tag = doc.Create.NewTag(views, i, False, TagMode.TM_ADDBY_MATERIAL, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					Mattags.append(tag)
			TransactionManager.Instance.TransactionTaskDone()
			result = Mattags
		else:
			TransactionManager.Instance.EnsureInTransaction(doc)
			tags = []
			if isinstance(views, list):
				for i,j,k in zip(elements, views, locationPts):
					location = toRvtPoint(k)
					tag = doc.Create.NewTag(j, i, False, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					tags.append(tag)
			else:
				for i, j in zip(elements, locationPts):
					location = toRvtPoint(j)
					tag = doc.Create.NewTag(views, i, False, TagMode.TM_ADDBY_CATEGORY, TagOrientation.Horizontal, location)
					tag.ChangeTypeId(tagTypeId)
					tags.append(tag)
			TransactionManager.Instance.TransactionTaskDone()
			result = tags
	else:
		result = "RunIt is set to False."
except:
	# if error accurs anywhere in the process catch it
	import traceback
	errorReport = traceback.format_exc()

#Assign your output to the OUT variable
if errorReport == None:
	OUT = result
else:
	OUT = errorReport</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="54e53017-65d5-4750-a5bb-e27be062fd5b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="947.745188696591" y="392.104657091986" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="TagLocations" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="9f2bf1b5-ed11-49ff-962d-0b0ebd20f533" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="949.666561470757" y="458.392017800716" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="TagType" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="6cdb497f-3999-4bfd-ba34-25beaa516cd1" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="940.059697599926" y="523.718692122363" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="6b77b191-21a3-48e8-8e6f-19c6bd19c09a" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="959.273425341587" y="598.65223031484" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Views" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="76775cd6-1213-4839-937d-aaad5159cb34" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="828.620076698293" y="679.349886829816" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="LinkInstance:var=null" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="cdc59f8d-7358-4070-b299-1252a271c277" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="866.086845794532" y="760.047543344791" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="RunIt:bool=false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="faa588b0-967c-46a1-8276-6d5e95a7df28" start_index="0" end="9d791e1c-8443-4a60-8eb0-c8d8cd9d1ffa" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="54e53017-65d5-4750-a5bb-e27be062fd5b" start_index="0" end="faa588b0-967c-46a1-8276-6d5e95a7df28" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9f2bf1b5-ed11-49ff-962d-0b0ebd20f533" start_index="0" end="faa588b0-967c-46a1-8276-6d5e95a7df28" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6cdb497f-3999-4bfd-ba34-25beaa516cd1" start_index="0" end="faa588b0-967c-46a1-8276-6d5e95a7df28" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6b77b191-21a3-48e8-8e6f-19c6bd19c09a" start_index="0" end="faa588b0-967c-46a1-8276-6d5e95a7df28" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="76775cd6-1213-4839-937d-aaad5159cb34" start_index="0" end="faa588b0-967c-46a1-8276-6d5e95a7df28" end_index="4" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="cdc59f8d-7358-4070-b299-1252a271c277" start_index="0" end="faa588b0-967c-46a1-8276-6d5e95a7df28" end_index="5" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>